#
#  - Compile JVM/Js
#  - Tests JVM
#  - publish JVM Sonatype Snapshot for branches : master/develop
#  - publish JVM Sonatype Stagge/Release (wait approval) for tags release
#
#  DOCKER_CONTEXT is a context global env variable for all application github p2m2 organization
#   - DOCKER_USER          -> login
#   - DOCKER_PASS          -> password
#   - ORGANIZATION_NAME    -> organization register on dockerhub
#
#  CREDENTIAL_CONTEXT used by build.sbt
#   - REALM_CREDENTIAL,HOST_CREDENTIAL,LOGIN_CREDENTIAL,PASSWORD_CREDENTIAL
#
version: 2.1
workflows:
  compile-workflow:
    jobs:
      - compile:
          context:
            - DOCKER_CONTEXT
      - lib_js:
          requires:
            - compile
          context:
            - DOCKER_CONTEXT

      - test_and_coverage_jvm:
          requires:
            - compile
          context:
            - DOCKER_CONTEXT

      - publish_snapshot:
          requires:
            - test_and_coverage_jvm
          context:
            - DOCKER_CONTEXT
            - CREDENTIAL_CONTEXT
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - develop
                - master

      - publish_tag_to_sonatype_stagge_for_release:
          requires:
            - compile
          context:
            - DOCKER_CONTEXT
            - CREDENTIAL_CONTEXT
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/

      - check_discovery_valid_fullopjs_cdn_jsdelivr

executors:

  openjdk:
      docker:
        - image: circleci/openjdk:8-jdk
          auth:
            username: ${DOCKER_USER}
            password: ${DOCKER_PASS}

  virtuoso_environment_executor:
      docker:
        - image: circleci/openjdk:8-jdk
          auth:
            username: ${DOCKER_USER}
            password: ${DOCKER_PASS}
        - image: tenforce/virtuoso:virtuoso7.2.5
          auth:
            username: ${DOCKER_USER}
            password: ${DOCKER_PASS}
          environment:
            VIRT_Parameters_NumberOfBuffers: 51000
            VIRT_Parameters_MaxDirtyBuffers: 37500
            VIRT_Parameters_TN_MAX_memory: 4000000
            VIRT_Parameters_TransactionAfterImageLimit: 500000
            VIRT_SPARQL_ResultSetMaxRows: 1000
            VIRT_SPARQL_MaxDataSourceSize: 10000
            VIRT_SPARQL_MaxQueryCostEstimationTime: 0
            VIRT_SPARQL_MaxQueryExecutionTime: 0
            DBA_PASSWORD: dba
            SPARQL_UPDATE: true
            DEFAULT_GRAPH: "graph:test:discovery:default:"

jobs:
  compile:
    executor: openjdk
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Compile - JVM
          command: cat /dev/null | sbt discoveryJVM/test:compile

      - run:
          name: Compile - JS
          command: cat /dev/null | sbt discoveryJS/test:compile

  lib_js:
    executor: openjdk
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: fastOptJS
          command: cat /dev/null | sbt discoveryJS/fastOptJS
      - run:
          name: fullOptJS
          command: cat /dev/null | sbt discoveryJS/fullOptJS

  test_and_coverage_jvm:
    executor: virtuoso_environment_executor
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Test and Coverage
          command: |
            cat /dev/null | sbt clean coverage discoveryJVM/test:test
            sbt discoveryJVM/coverageReport
            bash <(curl -s https://codecov.io/bash)
            bash <(curl -Ls https://coverage.codacy.com/get.sh) report

      - store_artifacts:
          path: discovery/jvm/target/test-reports

  publish_snapshot:
    executor: openjdk
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Snapshot publication
          command: |
            export DISCOVERY_VERSION="${CIRCLE_BRANCH}-SNAPSHOT"
            sbt publish

  publish_tag_to_sonatype_stagge_for_release:
    executor: openjdk
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Snapshot publication
          command: |
            export DISCOVERY_VERSION="${CIRCLE_TAG}"
            sbt publish

  check_discovery_valid_fullopjs_cdn_jsdelivr:
    executor: openjdk
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: fullOptJS
          command: cat /dev/null | sbt discoveryJS/fullOptJS

      - run:
          name: install node - npm
          command: |
            curl -sSL "https://nodejs.org/dist/v11.10.0/node-v11.10.0-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v11.10.0-linux-x64/bin/node
            curl https://www.npmjs.com/install.sh | sudo bash

      - run:
          name: browserify
          command: |
            npm install browserify

      - run:
          name: check discovery.js discovery-web.js
          command: |
            cp ./dist/discovery-web.js ./dist/discovery-tmp-web.js
            cp ./dist/discovery.js ./dist/discovery-tmp.js
            ./update_cdn_libjs.sh

            F1=./dist/discovery-tmp.js
            F2=./dist/discovery.js
            echo " ---- diff ---- "
            diff $F1 $F2

            if [ "$(diff -q $F1 $F2)" != ""  ]; then echo "1. discovery and discovery-web have to be updated with update_cdn_libjs.sh !" ; exit 1; fi ;

            F1=./dist/discovery-tmp-web.js
            F2=./dist/discovery-web.js

            diff -q $F1 $F2

            if [ "$(diff -q $F1 $F2)" != ""  ]; then  echo "2. discovery and discovery-web have to be updated with update_cdn_libjs.sh !" ; exit 1; fi ;
