# Scala CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/sample-config/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # virtuoso
      - run:
          name: Start virtuoso container
          command: |
            docker pull askomics/virtuoso:7.2.5.1
            docker run -d --name virtuoso -p 8891:8890 -p 1112:1111 -e DBA_PASSWORD=dba -e SPARQL_UPDATE=true -e DEFAULT_GRAPH=http://localhost:8891/DAV -t askomics/virtuoso:7.2.5.1 /bin/sh -c "netstat -nr | grep '^0\.0\.0\.0' | grep -oE '((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])' | grep -v '^0\.0\.0\.0' | sed 's/$/ host/' >> /etc/hosts && /virtuoso/virtuoso.sh"
            set +e
            RES=1
            echo -n "Wait for start "
            until [ $RES -eq 0 ]; do
                echo -n "."
                sleep 1
                docker logs virtuoso 2>&1 | grep "Server online at 1111" > /dev/null
                RES=$?
            done
            echo "virtuoso is Ok."
            set -e

      - run: cat /dev/null | sbt discoveryJVM/test:compile

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies--{{ checksum "build.sbt" }}

      # run tests!
      - run:
          command: |
            cat /dev/null | sbt clean coverage discoveryJVM/test:test
      # coverage
      - run: sbt discoveryJVM/coverageReport